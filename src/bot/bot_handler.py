import logging
from typing import Dict, List, Optional, Tuple
import re

from src.database.db_manager import DatabaseManager
from src.nlp.qa_processor import QAProcessor
from src.nlp.course_recommender import CourseRecommender
from src.nlp.free_gpt_integration import FreeGPTIntegration
from src.nlp.smart_qa_processor import SmartQAProcessor
from config import ENABLE_GPT_MODE, GPT_MODE_THRESHOLD

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class BotHandler:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–æ—Ç–∞"""
        self.db = DatabaseManager()
        self.qa_processor = QAProcessor(self.db)
        self.recommender = CourseRecommender(self.db)
        
        # –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è GPT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        self.gpt = FreeGPTIntegration(self.db) if ENABLE_GPT_MODE else None
        self.gpt_available = self.gpt and self.gpt.is_available()
        
        # –õ–æ–∫–∞–ª—å–Ω–∞—è —É–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞)
        self.smart_qa = SmartQAProcessor(self.db)
        
        if self.gpt_available:
            available_apis = self.gpt.get_available_apis()
            api_names = [api['name'] for api in available_apis]
            logger.info(f"üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ GPT API –≤–∫–ª—é—á–µ–Ω—ã: {', '.join(api_names)}")
        
        logger.info("üß† –õ–æ–∫–∞–ª—å–Ω–∞—è —É–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞")
        
        # –®–∞–±–ª–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.command_handlers = {
            '/start': self.handle_start,
            '/help': self.handle_help,
            '/programs': self.handle_programs,
            '/courses': self.handle_courses,
            '/recommend': self.handle_recommend,
            '/profile': self.handle_profile,
            '/faq': self.handle_faq,
            '/gpt': self.handle_gpt_mode,  # –£–º–Ω—ã–π —Ä–µ–∂–∏–º (–≤–Ω–µ—à–Ω–∏–π GPT –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π)
            '/smart': self.handle_smart_mode,  # –õ–æ–∫–∞–ª—å–Ω–∞—è —É–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
            '/compare': self.handle_program_comparison  # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º
        }
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        self.user_states = {}
        
        # –®–∞–±–ª–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã
        self.quick_questions = {
            'üìö –ö–∞–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–æ—Å—Ç—É–ø–Ω—ã?': self.handle_programs,
            '‚è±Ô∏è –°–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è –æ–±—É—á–µ–Ω–∏–µ?': lambda user_id, username: self.handle_duration_question(),
            'üéØ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è?': lambda user_id, username: self.handle_admission_question(),
            'üíº –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã?': lambda user_id, username: self.handle_career_question(),
            'üîç –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏': self.handle_recommend,
            '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å': lambda user_id, username: self.handle_ask_question_mode(user_id),
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
            'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å': self.handle_profile,
            'üìö –í—Å–µ –∫—É—Ä—Å—ã': self.handle_courses,
            'üéì –û –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö': self.handle_programs,
            'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': self.handle_start,
            'üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å—ã': self.handle_courses,
            '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å': self.handle_profile,
            # –£–º–Ω—ã–µ —Ä–µ–∂–∏–º—ã
            'ü§ñ –£–º–Ω—ã–π –æ—Ç–≤–µ—Ç': self.handle_gpt_mode,
            'üß† –£–º–Ω—ã–π –æ—Ç–≤–µ—Ç': self.handle_smart_mode,
            'üìä –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã': self.handle_program_comparison
        }
    
    def process_message(self, user_id: int, username: str, message: str) -> Dict:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = message.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
            user = self.db.get_user_by_telegram_id(user_id)
            if not user:
                self.db.insert_user(user_id, username)
                user = self.db.get_user_by_telegram_id(user_id)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            if message.startswith('/'):
                return self.handle_command(user_id, username, message)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            if message in self.quick_questions:
                handler = self.quick_questions[message]
                return handler(user_id, username)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
            user_state = self.user_states.get(user_id, {})
            if user_state.get('state'):
                return self.handle_state_message(user_id, username, message, user_state)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Q&A –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            return self.handle_question(user_id, username, message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id}: {e}")
            return {
                'text': '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
                'keyboard': self.get_main_keyboard()
            }
    
    def handle_command(self, user_id: int, username: str, command: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
        handler = self.command_handlers.get(command)
        if handler:
            return handler(user_id, username)
        else:
            return {
                'text': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.',
                'keyboard': self.get_main_keyboard()
            }
    
    def handle_start(self, user_id: int, username: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç{f', {username}' if username else ''}!

–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º –ò–¢–ú–û –ø–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É.

üéØ –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫—É—Ä—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å –≤—ã–±—Ä–∞—Ç—å –º–µ–∂–¥—É –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ "AI" –∏ "AI-–ø—Ä–æ–¥—É–∫—Ç—ã"
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞—Ö

üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:
‚Ä¢ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç (—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è)
‚Ä¢ AI-–ø—Ä–æ–¥—É–∫—Ç—ã (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–º—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!
        """
        
        return {
            'text': welcome_text.strip(),
            'keyboard': self.get_main_keyboard()
        }
    
    def handle_help(self, user_id: int, username: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/programs - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö
/courses - –°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤
/recommend - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤
/profile - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
/faq - –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã

üìù –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
2. –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ
3. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å

üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
‚Ä¢ "–ö–∞–∫–∏–µ –∫—É—Ä—Å—ã –ø–æ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é –µ—Å—Ç—å?"
‚Ä¢ "–í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏?"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è –æ–±—É—á–µ–Ω–∏–µ?"
‚Ä¢ "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è?"
        """
        
        return {
            'text': help_text.strip(),
            'keyboard': self.get_main_keyboard()
        }
    
    def handle_programs(self, user_id: int, username: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö"""
        programs = self.db.get_all_programs()
        
        if not programs:
            return {
                'text': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.',
                'keyboard': self.get_main_keyboard()
            }
        
        response_text = "üéì –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n\n"
        
        for program in programs:
            courses_count = len(self.db.get_courses_by_program(program['id']))
            
            response_text += f"üìã {program['name']}\n"
            response_text += f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {program.get('duration', '2 –≥–æ–¥–∞')}\n"
            response_text += f"üìö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—Å–æ–≤: {courses_count}\n"
            response_text += f"üìù {program.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')[:200]}...\n"
            
            if program.get('career_prospects'):
                prospects = program['career_prospects'][:3]  # –ü–µ—Ä–≤—ã–µ 3 –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã
                response_text += f"üíº –ö–∞—Ä—å–µ—Ä–∞: {', '.join(prospects)}\n"
            
            response_text += "\n" + "‚îÄ" * 30 + "\n\n"
        
        keyboard = self.get_programs_keyboard()
        
        return {
            'text': response_text.strip(),
            'keyboard': keyboard
        }
    
    def handle_courses(self, user_id: int, username: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫—É—Ä—Å–æ–≤"""
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É—Ä—Å–æ–≤
        programs = self.db.get_all_programs()
        
        if not programs:
            return {
                'text': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.',
                'keyboard': self.get_main_keyboard()
            }
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        self.user_states[user_id] = {'state': 'select_program_for_courses'}
        
        keyboard = []
        for program in programs:
            courses_count = len(self.db.get_courses_by_program(program['id']))
            keyboard.append([f"üìö {program['name']} ({courses_count} –∫—É—Ä—Å–æ–≤)"])
        
        keyboard.append(["üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        
        return {
            'text': 'üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É—Ä—Å–æ–≤:',
            'keyboard': keyboard
        }
    
    def handle_recommend(self, user_id: int, username: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = self.db.get_user_by_telegram_id(user_id)
        
        if not user or not user.get('interests'):
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
            self.user_states[user_id] = {'state': 'setup_profile_for_recommendations'}
            
            return {
                'text': """
üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –∏ –æ–ø—ã—Ç–µ.

üìù –ù–∞–ø–∏—à–∏—Ç–µ:
‚Ä¢ –í–∞—à –æ–ø—ã—Ç –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ (—è–∑—ã–∫–∏, —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏)
‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –æ–±–ª–∞—Å—Ç–∏ (ML, CV, NLP, Data Science –∏ —Ç.–¥.)
‚Ä¢ –¶–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è (–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)

üí° –ü—Ä–∏–º–µ—Ä:
"–ó–Ω–∞—é Python, —Ä–∞–±–æ—Ç–∞–ª —Å pandas –∏ sklearn. –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ computer vision. –•–æ—á—É –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏."
                """.strip(),
                'keyboard': [["üîô –û—Ç–º–µ–Ω–∞"]]
            }
        
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        return self.generate_recommendations(user_id, user)
    
    def handle_profile(self, user_id: int, username: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        user = self.db.get_user_by_telegram_id(user_id)
        
        current_info = ""
        if user and user.get('interests'):
            current_info = f"\nüîç –¢–µ–∫—É—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(user['interests'])}"
        if user and user.get('background'):
            bg = user['background']
            current_info += f"\nüíº –û–ø—ã—Ç: {bg.get('experience_level', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
            if bg.get('technical_skills'):
                current_info += f"\n‚öôÔ∏è –ù–∞–≤—ã–∫–∏: {', '.join(bg['technical_skills'])}"
        
        self.user_states[user_id] = {'state': 'update_profile'}
        
        text = f"""
üë§ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è{current_info}

üìù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤:

‚Ä¢ –í–∞—à –æ–ø—ã—Ç –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏
‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –æ–±–ª–∞—Å—Ç–∏ –ò–ò
‚Ä¢ –¶–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)

üí° –ü—Ä–∏–º–µ—Ä:
"–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É—é –Ω–∞ Python 3 –≥–æ–¥–∞, —Ä–∞–±–æ—Ç–∞—é Data Scientist. –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç deep learning –∏ NLP. –•–æ—á—É —É–≥–ª—É–±–∏—Ç—å –∑–Ω–∞–Ω–∏—è –¥–ª—è –∫–∞—Ä—å–µ—Ä—ã –≤ AI research. –°–∫–ª–æ–Ω—è—é—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç."
        """
        
        return {
            'text': text.strip(),
            'keyboard': [["üîô –û—Ç–º–µ–Ω–∞"]]
        }
    
    def handle_faq(self, user_id: int, username: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ FAQ"""
        qa_pairs = self.db.get_all_qa_pairs()
        
        if not qa_pairs:
            return {
                'text': '–ë–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø—É—Å—Ç–∞.',
                'keyboard': self.get_main_keyboard()
            }
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for qa in qa_pairs:
            category = qa.get('category', 'general')
            if category not in categories:
                categories[category] = []
            categories[category].append(qa)
        
        response_text = "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
        
        category_names = {
            'general': 'üìã –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã',
            'admission': 'üéì –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ',
            'programs': 'üìö –û –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö',
            'courses': 'üìñ –ö—É—Ä—Å—ã',
            'career': 'üíº –ö–∞—Ä—å–µ—Ä–∞'
        }
        
        for category, questions in categories.items():
            category_name = category_names.get(category, category.title())
            response_text += f"{category_name}\n"
            
            for qa in questions[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 3 –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                response_text += f"‚ùî {qa['question']}\n"
                response_text += f"üí¨ {qa['answer'][:100]}...\n\n"
            
            response_text += "‚îÄ" * 30 + "\n\n"
        
        response_text += "üí° –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ!"
        
        return {
            'text': response_text.strip(),
            'keyboard': self.get_main_keyboard()
        }
    
    def handle_question(self, user_id: int, username: str, question: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±–∞–∑–æ–≤—É—é Q&A —Å–∏—Å—Ç–µ–º—É
        result = self.qa_processor.get_answer(question)
        
        logger.info(f"üîç –ë–∞–∑–æ–≤–∞—è Q&A —Å–∏—Å—Ç–µ–º–∞: confidence={result['confidence']:.3f}, is_exact_match={result.get('is_exact_match', False)}")
        logger.info(f"üîß GPT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: gpt_available={self.gpt_available}, threshold={GPT_MODE_THRESHOLD}")
        
        # –ï—Å–ª–∏ GPT –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∏–º–µ–µ—Ç –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–π GPT
        if (self.gpt_available and 
            result['confidence'] < GPT_MODE_THRESHOLD and 
            not result.get('is_exact_match', False)):
            
            logger.info(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π GPT —Ä–µ–∂–∏–º –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: {question}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.db.get_user_by_telegram_id(user_id)
            user_context = None
            if user:
                user_context = {
                    'interests': user.get('interests', []),
                    'background': user.get('background', {}),
                    'preferred_program': user.get('preferred_program')
                }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π GPT
            gpt_result = self.gpt.generate_smart_answer(question, user_context)
            
            if gpt_result.get('is_ai_generated'):
                response_text = gpt_result['answer']
                response_text += f"\n\nüÜì –û—Ç–≤–µ—Ç –æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ GPT —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –ò–¢–ú–û"
                
                return {
                    'text': response_text,
                    'keyboard': self.get_gpt_keyboard()
                }
        else:
            logger.info(f"‚ùå –í–Ω–µ—à–Ω–∏–π GPT –ø—Ä–æ–ø—É—â–µ–Ω: gpt_available={self.gpt_available}, confidence={result['confidence']:.3f}, threshold={GPT_MODE_THRESHOLD}, is_exact_match={result.get('is_exact_match', False)}")
        
        # –ï—Å–ª–∏ –≤–Ω–µ—à–Ω–∏–π GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –¥–∞–ª –ø–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —É–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        if result['confidence'] < GPT_MODE_THRESHOLD:
            logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é —É–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: {question}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.db.get_user_by_telegram_id(user_id)
            user_context = None
            if user:
                user_context = {
                    'interests': user.get('interests', []),
                    'background': user.get('background', {}),
                    'preferred_program': user.get('preferred_program')
                }
            
            smart_result = self.smart_qa.generate_smart_answer(question, user_context)
            
            if smart_result.get('is_ai_generated') or smart_result.get('method') in ['smart_enhanced', 'smart_local']:
                response_text = smart_result['answer']
                response_text += f"\n\nüß† –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ò–¢–ú–û"
                
                return {
                    'text': response_text,
                    'keyboard': self.get_smart_keyboard()
                }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        response_text = result['answer']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞
        if result['confidence'] < 0.5:
            response_text += "\n\nüí° –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
            response_text += "\nüß† –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–£–º–Ω—ã–π –æ—Ç–≤–µ—Ç' –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if result['confidence'] > 0.3:
            related = self.qa_processor.get_related_questions(question, top_k=2)
            if related:
                response_text += "\n\nüìã –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—Å —Ç–∞–∫–∂–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:\n"
                for rel in related:
                    response_text += f"‚Ä¢ {rel['question']}\n"
        
        keyboard = self.get_main_keyboard()
        if result['confidence'] < 0.7:
            keyboard = self.get_smart_keyboard()
        
        return {
            'text': response_text,
            'keyboard': keyboard
        }
    
    def handle_state_message(self, user_id: int, username: str, message: str, user_state: Dict) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–∞–º–∫–∞—Ö –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
        state = user_state['state']
        
        if message == "üîô –û—Ç–º–µ–Ω–∞" or message == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.user_states.pop(user_id, None)
            return self.handle_start(user_id, username)
        
        if state == 'setup_profile_for_recommendations' or state == 'update_profile':
            return self.handle_profile_input(user_id, message)
        
        elif state == 'select_program_for_courses':
            return self.handle_program_selection_for_courses(user_id, message)
        
        elif state == 'gpt_mode':
            # GPT —Ä–µ–∂–∏–º - –æ—Ç–≤–µ—á–∞–µ–º —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π GPT
            return self.handle_gpt_question(user_id, username, message)
        
        elif state == 'smart_mode':
            # –õ–æ–∫–∞–ª—å–Ω–∞—è —É–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
            return self.handle_smart_question(user_id, username, message)
        
        elif state == 'program_comparison':
            return self.handle_program_comparison_gpt(user_id, message)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏
        self.user_states.pop(user_id, None)
        return self.handle_question(user_id, username, message)
    
    def handle_profile_input(self, user_id: int, profile_text: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            analysis = self.recommender.analyze_user_background(profile_text)
            interests = self.recommender.extract_interests_from_text(profile_text)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
            preferred_program = None
            text_lower = profile_text.lower()
            if 'ai-–ø—Ä–æ–¥—É–∫—Ç' in text_lower or '–ø—Ä–æ–¥—É–∫—Ç' in text_lower:
                preferred_program = 'AI_Product'
            elif '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç' in text_lower or '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω' in text_lower:
                preferred_program = 'AI'
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.db.update_user_preferences(
                user_id,
                background=analysis,
                interests=list(interests.keys()) if interests else [],
                preferred_program=preferred_program
            )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.user_states.pop(user_id, None)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            user = self.db.get_user_by_telegram_id(user_id)
            recommendations_response = self.generate_recommendations(user_id, user)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
            profile_info = f"""
‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!

üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(interests.keys()) if interests else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}
üíº –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞: {analysis.get('experience_level', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}
‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏: {', '.join(analysis.get('technical_skills', [])) or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}
            """
            
            if preferred_program:
                program_name = 'AI-–ø—Ä–æ–¥—É–∫—Ç—ã' if preferred_program == 'AI_Product' else '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç'
                profile_info += f"\nüéØ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: {program_name}"
            
            profile_info += "\n\n" + "‚îÄ" * 30 + "\n\n"
            
            recommendations_response['text'] = profile_info + recommendations_response['text']
            
            return recommendations_response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            self.user_states.pop(user_id, None)
            return {
                'text': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                'keyboard': self.get_main_keyboard()
            }
    
    def generate_recommendations(self, user_id: int, user: Dict) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            interests = {}
            if user.get('interests'):
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å —Å –≤–µ—Å–∞–º–∏
                for interest in user['interests']:
                    interests[interest] = 1.0
            
            preferred_program = user.get('preferred_program')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = self.recommender.recommend_courses(
                interests, 
                preferred_program, 
                top_k=5
            )
            
            if not recommendations:
                return {
                    'text': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫—É—Ä—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
                    'keyboard': self.get_main_keyboard()
                }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            self.recommender.save_recommendations(user_id, recommendations)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_text = "üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤:\n\n"
            
            for i, rec in enumerate(recommendations, 1):
                score_emoji = "üî•" if rec['score'] > 0.7 else "üëç" if rec['score'] > 0.4 else "üí°"
                mandatory_mark = " ‚≠ê (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)" if rec['is_mandatory'] else ""
                
                response_text += f"{score_emoji} {i}. {rec['course_name']}{mandatory_mark}\n"
                response_text += f"üìö –ü—Ä–æ–≥—Ä–∞–º–º–∞: {rec['program_name']}\n"
                response_text += f"üìÖ –°–µ–º–µ—Å—Ç—Ä: {rec['semester']} | üí≥ –ö—Ä–µ–¥–∏—Ç—ã: {rec['credits']}\n"
                response_text += f"üéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {rec['score']:.0%}\n"
                response_text += f"üí° –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {rec['reason']}\n\n"
            
            response_text += "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ. –û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!"
            
            keyboard = [
                ["üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "üìö –í—Å–µ –∫—É—Ä—Å—ã"],
                ["üéì –û –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
            ]
            
            return {
                'text': response_text.strip(),
                'keyboard': keyboard
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return {
                'text': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                'keyboard': self.get_main_keyboard()
            }
    
    def handle_program_selection_for_courses(self, user_id: int, message: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É—Ä—Å–æ–≤"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        if "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç" in message:
            program_name = "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
        elif "AI-–ø—Ä–æ–¥—É–∫—Ç—ã" in message:
            program_name = "AI-–ø—Ä–æ–¥—É–∫—Ç—ã"
        else:
            self.user_states.pop(user_id, None)
            return {
                'text': '–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã.',
                'keyboard': self.get_main_keyboard()
            }
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ –±–∞–∑–µ
        programs = self.db.get_all_programs()
        program = None
        for p in programs:
            if p['name'] == program_name:
                program = p
                break
        
        if not program:
            self.user_states.pop(user_id, None)
            return {
                'text': '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.',
                'keyboard': self.get_main_keyboard()
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã
        courses = self.db.get_courses_by_program(program['id'])
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.user_states.pop(user_id, None)
        
        if not courses:
            return {
                'text': f'–ö—É—Ä—Å—ã –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã "{program_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.',
                'keyboard': self.get_main_keyboard()
            }
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫—É—Ä—Å—ã –ø–æ —Å–µ–º–µ—Å—Ç—Ä–∞–º
        semesters = {}
        for course in courses:
            semester = course.get('semester', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ–º–µ—Å—Ç—Ä')
            if semester not in semesters:
                semesters[semester] = []
            semesters[semester].append(course)
        
        response_text = f"üìö –ö—É—Ä—Å—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã '{program_name}':\n\n"
        
        for semester in sorted(semesters.keys()):
            semester_courses = semesters[semester]
            response_text += f"üìÖ {semester}\n"
            
            for course in semester_courses[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 10 –∫—É—Ä—Å–æ–≤ –∑–∞ —Å–µ–º–µ—Å—Ç—Ä
                mandatory_mark = " ‚≠ê" if course.get('is_mandatory') else ""
                tags_text = f" | {', '.join(course.get('tags', [])[:3])}" if course.get('tags') else ""
                
                response_text += f"‚Ä¢ {course['name']}{mandatory_mark} ({course.get('credits', 0)} –∫—Ä.){tags_text}\n"
            
            if len(semester_courses) > 10:
                response_text += f"... –∏ –µ—â–µ {len(semester_courses) - 10} –∫—É—Ä—Å–æ–≤\n"
            
            response_text += "\n"
        
        response_text += f"üìä –í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤: {len(courses)}\n"
        response_text += "‚≠ê - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã\n\n"
        response_text += "üí° –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /recommend"
        
        return {
            'text': response_text.strip(),
            'keyboard': self.get_main_keyboard()
        }
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    def handle_duration_question(self) -> Dict:
        """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return {
            'text': '‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è: 2 –≥–æ–¥–∞ (4 —Å–µ–º–µ—Å—Ç—Ä–∞)\n\n–≠—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º –≤ –ò–¢–ú–û.',
            'keyboard': self.get_main_keyboard()
        }
    
    def handle_admission_question(self) -> Dict:
        """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –∫ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é"""
        programs = self.db.get_all_programs()
        if programs and programs[0].get('admission_requirements'):
            requirements = programs[0]['admission_requirements']
            req_text = '\n‚Ä¢ '.join([''] + requirements)
        else:
            req_text = """
‚Ä¢ –í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–¥–∏–ø–ª–æ–º –±–∞–∫–∞–ª–∞–≤—Ä–∞ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞)
‚Ä¢ –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –ø–æ –ø—Ä–æ—Ñ–∏–ª—é –ø—Ä–æ–≥—Ä–∞–º–º—ã
‚Ä¢ –ö–æ–Ω–∫—É—Ä—Å–Ω—ã–π –æ—Ç–±–æ—Ä –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π"""
        
        return {
            'text': f'üéì –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:{req_text}',
            'keyboard': self.get_main_keyboard()
        }
    
    def handle_career_question(self) -> Dict:
        """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞—Ö"""
        programs = self.db.get_all_programs()
        all_prospects = set()
        
        for program in programs:
            if program.get('career_prospects'):
                all_prospects.update(program['career_prospects'])
        
        if all_prospects:
            prospects_text = '\n‚Ä¢ '.join([''] + list(all_prospects))
        else:
            prospects_text = """
‚Ä¢ ML-–∏–Ω–∂–µ–Ω–µ—Ä
‚Ä¢ Data Scientist  
‚Ä¢ AI-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
‚Ä¢ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –≤ –æ–±–ª–∞—Å—Ç–∏ –ò–ò
‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä AI-–ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        
        return {
            'text': f'üíº –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã:{prospects_text}',
            'keyboard': self.get_main_keyboard()
        }
    
    def handle_ask_question_mode(self, user_id: int) -> Dict:
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤"""
        return {
            'text': '‚ùì –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å\n\n–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö, –∫—É—Ä—Å–∞—Ö, –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –∏–ª–∏ –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞—Ö.',
            'keyboard': [["üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        }
    
    def handle_gpt_mode(self, user_id: int, username: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /gpt"""
        if not self.gpt_available:
            return {
                'text': 'GPT —Ä–µ–∂–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                'keyboard': self.get_main_keyboard()
            }
        
        self.user_states[user_id] = {'state': 'gpt_mode'}
        return {
            'text': 'ü§ñ –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —É–º–Ω—ã–π —Ä–µ–∂–∏–º!\n\n–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò –∏ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –ò–¢–ú–û.\n\n–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö, –∫—É—Ä—Å–∞—Ö –∏–ª–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏.',
            'keyboard': [["üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        }
    
    def handle_smart_mode(self, user_id: int, username: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /smart"""
        self.user_states[user_id] = {'state': 'smart_mode'}
        return {
            'text': 'üß† –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é —É–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É!\n\n–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É—è –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –ò–¢–ú–û.\n\n–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö, –∫—É—Ä—Å–∞—Ö –∏–ª–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏.',
            'keyboard': [["üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        }
    
    def handle_gpt_question(self, user_id: int, username: str, question: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ GPT —Ä–µ–∂–∏–º–µ"""
        if not self.gpt_available:
            return {
                'text': 'GPT —Ä–µ–∂–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.',
                'keyboard': self.get_main_keyboard()
            }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.db.get_user_by_telegram_id(user_id)
            user_context = None
            if user:
                user_context = {
                    'interests': user.get('interests', []),
                    'background': user.get('background', {}),
                    'preferred_program': user.get('preferred_program')
                }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ GPT
            result = self.gpt.generate_smart_answer(question, user_context)
            
            response_text = result['answer']
            response_text += f"\n\nü§ñ –£–º–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ò–¢–ú–û"
            
            return {
                'text': response_text,
                'keyboard': self.get_gpt_keyboard()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ GPT —Ä–µ–∂–∏–º–µ: {e}")
            return {
                'text': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                'keyboard': self.get_main_keyboard()
            }
    
    def handle_smart_question(self, user_id: int, username: str, question: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —É–º–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.db.get_user_by_telegram_id(user_id)
            user_context = None
            if user:
                user_context = {
                    'interests': user.get('interests', []),
                    'background': user.get('background', {}),
                    'preferred_program': user.get('preferred_program')
                }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—É—é —É–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            result = self.smart_qa.generate_smart_answer(question, user_context)
            
            response_text = result['answer']
            response_text += f"\n\nüß† –õ–æ–∫–∞–ª—å–Ω—ã–π —É–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ò–¢–ú–û"
            
            return {
                'text': response_text,
                'keyboard': self.get_smart_keyboard()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —É–º–Ω–æ–º —Ä–µ–∂–∏–º–µ: {e}")
            return {
                'text': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                'keyboard': self.get_main_keyboard()
            }
    
    def handle_program_comparison_gpt(self, user_id: int, message: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º —á–µ—Ä–µ–∑ GPT"""
        if not self.gpt_available:
            self.user_states.pop(user_id, None)
            return {
                'text': 'GPT —Ä–µ–∂–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.',
                'keyboard': self.get_main_keyboard()
            }
        
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.user_states.pop(user_id, None)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º —á–µ—Ä–µ–∑ GPT
            result = self.gpt.get_program_comparison()
            
            if result.get('success'):
                response_text = result['comparison']
                response_text += f"\n\nü§ñ –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"
                
                return {
                    'text': response_text,
                    'keyboard': self.get_main_keyboard()
                }
            else:
                return {
                    'text': f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                    'keyboard': self.get_main_keyboard()
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º —á–µ—Ä–µ–∑ GPT: {e}")
            self.user_states.pop(user_id, None)
            return {
                'text': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º.',
                'keyboard': self.get_main_keyboard()
            }
    
    def handle_program_comparison(self, user_id: int, username: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º"""
        if not self.gpt_available:
            return {
                'text': 'GPT —Ä–µ–∂–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /programs –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö.',
                'keyboard': self.get_main_keyboard()
            }
        
        try:
            # –°—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ GPT
            result = self.gpt.get_program_comparison()
            
            if result.get('success'):
                response_text = result['comparison']
                response_text += f"\n\nü§ñ –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"
                
                return {
                    'text': response_text,
                    'keyboard': self.get_main_keyboard()
                }
            else:
                return {
                    'text': f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                    'keyboard': self.get_main_keyboard()
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º: {e}")
            return {
                'text': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º.',
                'keyboard': self.get_main_keyboard()
            }
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    def get_main_keyboard(self) -> List[List[str]]:
        """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        keyboard = [
            ["üìö –ö–∞–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–æ—Å—Ç—É–ø–Ω—ã?", "‚è±Ô∏è –°–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è –æ–±—É—á–µ–Ω–∏–µ?"],
            ["üéØ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è?", "üíº –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã?"],
            ["üîç –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å—ã"],
            ["‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        if self.gpt_available:
            keyboard.append(["ü§ñ –£–º–Ω—ã–π –æ—Ç–≤–µ—Ç", "üìä –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã"])
        else:
            keyboard.append(["üß† –£–º–Ω—ã–π –æ—Ç–≤–µ—Ç", "üìä –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã"])
        
        return keyboard
    
    def get_programs_keyboard(self) -> List[List[str]]:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏"""
        keyboard = [
            ["üîç –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å—ã"],
            ["‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        
        keyboard.insert(1, ["üìä –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã"])
        
        return keyboard
    
    def get_gpt_keyboard(self) -> List[List[str]]:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ GPT —Ä–µ–∂–∏–º–∞"""
        return [
            ["ü§ñ –£–º–Ω—ã–π –æ—Ç–≤–µ—Ç", "üìä –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã"],
            ["üîç –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
    
    def get_smart_keyboard(self) -> List[List[str]]:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        return [
            ["üß† –£–º–Ω—ã–π –æ—Ç–≤–µ—Ç", "üìä –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã"],
            ["üîç –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    bot = BotHandler()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    test_messages = [
        ("/start", "–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç"),
        ("üìö –ö–∞–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–æ—Å—Ç—É–ø–Ω—ã?", "–ë—ã—Å—Ç—Ä—ã–π –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö"),
        ("–°–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è –æ–±—É—á–µ–Ω–∏–µ?", "–°–≤–æ–±–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å"),
        ("/recommend", "–ó–∞–ø—Ä–æ—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    ]
    
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BotHandler:")
    print("=" * 50)
    
    for message, description in test_messages:
        print(f"\n{description}: '{message}'")
        response = bot.process_message(12345, "test_user", message)
        print("–û—Ç–≤–µ—Ç:")
        print(response['text'][:200] + "..." if len(response['text']) > 200 else response['text'])
        print(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {len(response.get('keyboard', []))} –∫–Ω–æ–ø–æ–∫")
        print("-" * 30) 