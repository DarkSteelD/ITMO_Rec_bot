import openai
import os
import logging
from typing import Dict, List, Optional, Tuple
import json

from src.database.db_manager import DatabaseManager
from src.nlp.qa_processor import QAProcessor
from config import TELEGRAM_BOT_TOKEN

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class GPTIntegration:
    def __init__(self, db_manager: DatabaseManager = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å RAG"""
        self.db = db_manager or DatabaseManager()
        self.qa_processor = QAProcessor(self.db)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
        self.api_key = os.getenv('OPENAI_API_KEY') or os.getenv('GPT_API_KEY')
        self.api_base = os.getenv('GPT_API_BASE', 'https://api.openai.com/v1')
        self.model = os.getenv('GPT_MODEL', 'gpt-3.5-turbo')
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ/–¥–µ—à–µ–≤—ã–µ)
        self.use_free_api = os.getenv('USE_FREE_GPT', 'false').lower() == 'true'
        
        if self.api_key:
            openai.api_key = self.api_key
            openai.api_base = self.api_base
            logger.info(f"GPT API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.model}")
        else:
            logger.warning("GPT API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π.")
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–¢–ú–û –±–æ—Ç–∞
        self.system_prompt = """
–¢—ã - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º –ò–¢–ú–û –ø–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É.

–¢–í–û–Ø –†–û–õ–¨:
- –û—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç" –∏ "AI-–ø—Ä–æ–¥—É–∫—Ç—ã" 
- –ü–æ–º–æ–≥–∞–µ—à—å –≤—ã–±–∏—Ä–∞—Ç—å –∫—É—Ä—Å—ã –∏ —Å—Ç—Ä–æ–∏—Ç—å —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω
- –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—à—å –ø–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–º –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞–º
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å –¢–û–õ–¨–ö–û –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

–ü–†–ê–í–ò–õ–ê:
- –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ
- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º
- –†–µ–∫–æ–º–µ–Ω–¥—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
- –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

–ö–û–ù–¢–ï–ö–°–¢ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ.
        """.strip()
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GPT API"""
        return self.api_key is not None
    
    def get_relevant_context(self, user_question: str, max_items: int = 5) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        context_parts = []
        
        # 1. –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ Q&A
        qa_result = self.qa_processor.get_answer(user_question)
        if qa_result['confidence'] > 0.3:
            context_parts.append(f"Q: {qa_result.get('matched_question', '–ü–æ—Ö–æ–∂–∏–π –≤–æ–ø—Ä–æ—Å')}")
            context_parts.append(f"A: {qa_result['answer']}")
        
        # 2. –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        related_qa = self.qa_processor.get_related_questions(user_question, top_k=3)
        for qa in related_qa:
            context_parts.append(f"Q: {qa['question']}")
            context_parts.append(f"A: {qa['answer']}")
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö
        programs = self.db.get_all_programs()
        context_parts.append("\n–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–ì–†–ê–ú–ú–ê–•:")
        for program in programs:
            context_parts.append(f"\nüìö {program['name']}")
            context_parts.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: {program.get('description', '')[:200]}...")
            context_parts.append(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {program.get('duration', '')}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—É—Ä—Å–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            courses = self.db.get_courses_by_program(program['id'])[:5]
            if courses:
                context_parts.append("–ü—Ä–∏–º–µ—Ä—ã –∫—É—Ä—Å–æ–≤:")
                for course in courses:
                    tags_str = ', '.join(course.get('tags', [])[:3])
                    context_parts.append(f"  - {course['name']} ({tags_str})")
        
        # 4. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫—É—Ä—Å–∞—Ö, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫—É—Ä—Å—ã
        if any(word in user_question.lower() for word in ['–∫—É—Ä—Å', '–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞', '–ø—Ä–µ–¥–º–µ—Ç', '–∏–∑—É—á–µ–Ω–∏–µ']):
            all_courses = self.db.get_all_courses()
            
            # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            course_keywords = ['–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ', 'python', '–¥–∞–Ω–Ω—ã–µ', 
                             '–∞–ª–≥–æ—Ä–∏—Ç–º', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'nlp', 'computer vision']
            
            relevant_courses = []
            for course in all_courses:
                course_text = f"{course['name']} {' '.join(course.get('tags', []))}".lower()
                for keyword in course_keywords:
                    if keyword in user_question.lower() and keyword in course_text:
                        relevant_courses.append(course)
                        break
            
            if relevant_courses:
                context_parts.append("\n–°–í–Ø–ó–ê–ù–ù–´–ï –ö–£–†–°–´:")
                for course in relevant_courses[:5]:
                    context_parts.append(f"  - {course['name']} ({course.get('program_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')})")
                    if course.get('tags'):
                        context_parts.append(f"    –¢–µ–≥–∏: {', '.join(course['tags'])}")
        
        return '\n'.join(context_parts)
    
    def generate_smart_answer(self, user_question: str, user_context: Dict = None) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GPT —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG"""
        
        if not self.is_available():
            # Fallback –∫ –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ Q&A
            return self.qa_processor.get_answer(user_question)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
            relevant_context = self.get_relevant_context(user_question)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è GPT
            messages = [
                {"role": "system", "content": self.system_prompt},
                {"role": "user", "content": f"""
–ö–û–ù–¢–ï–ö–°–¢ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ò–¢–ú–û:
{relevant_context}

–í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {user_question}

–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç, —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã.
                """.strip()}
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if user_context:
                user_info = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {json.dumps(user_context, ensure_ascii=False)}"
                messages[1]["content"] += f"\n\n{user_info}"
            
            # –ó–∞–ø—Ä–æ—Å –∫ GPT
            response = openai.ChatCompletion.create(
                model=self.model,
                messages=messages,
                max_tokens=1000,
                temperature=0.7,
                top_p=0.9
            )
            
            gpt_answer = response.choices[0].message.content.strip()
            
            return {
                'answer': gpt_answer,
                'confidence': 0.9,  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è GPT –æ—Ç–≤–µ—Ç–æ–≤
                'method': 'gpt_rag',
                'context_used': len(relevant_context) > 100,
                'is_ai_generated': True
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ GPT API: {e}")
            # Fallback –∫ –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
            fallback_result = self.qa_processor.get_answer(user_question)
            fallback_result['method'] = 'fallback_qa'
            return fallback_result
    
    def generate_course_recommendations_with_gpt(self, user_interests: str, 
                                               user_background: str = "") -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫—É—Ä—Å–æ–≤ —á–µ—Ä–µ–∑ GPT"""
        
        if not self.is_available():
            return {'error': 'GPT API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É—Ä—Å—ã –∏–∑ –±–∞–∑—ã
            all_courses = self.db.get_all_courses()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∫—É—Ä—Å–∞–º–∏
            courses_context = "–î–û–°–¢–£–ü–ù–´–ï –ö–£–†–°–´ –ò–¢–ú–û:\n\n"
            for course in all_courses:
                courses_context += f"üìö {course['name']}\n"
                courses_context += f"   –ü—Ä–æ–≥—Ä–∞–º–º–∞: {course.get('program_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                courses_context += f"   –°–µ–º–µ—Å—Ç—Ä: {course.get('semester', '')}\n"
                courses_context += f"   –ö—Ä–µ–¥–∏—Ç—ã: {course.get('credits', '')}\n"
                if course.get('tags'):
                    courses_context += f"   –¢–µ–≥–∏: {', '.join(course['tags'])}\n"
                courses_context += "\n"
            
            messages = [
                {"role": "system", "content": """
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –ò–¢–ú–û –≤ –æ–±–ª–∞—Å—Ç–∏ –ò–ò. 
–†–µ–∫–æ–º–µ–Ω–¥—É–π –∫—É—Ä—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ –±—ç–∫–≥—Ä–∞—É–Ω–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ó–ê–î–ê–ß–ê:
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –í—ã–±–µ—Ä–∏ 5 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫—É—Ä—Å–æ–≤
- –û–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É –∫–∞–∂–¥—ã–π –∫—É—Ä—Å –ø–æ–¥—Ö–æ–¥–∏—Ç
- –î–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑—É—á–µ–Ω–∏—è

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

üî• 1. [–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞]
üìö –ü—Ä–æ–≥—Ä–∞–º–º–∞: [–ø—Ä–æ–≥—Ä–∞–º–º–∞]
üí° –ü–æ—á–µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç: [–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ]

[–ø—Ä–æ–¥–æ–ª–∂–∏ –¥–ª—è –≤—Å–µ—Ö 5 –∫—É—Ä—Å–æ–≤]

üí≠ –°–æ–≤–µ—Ç—ã –ø–æ –æ–±—É—á–µ–Ω–∏—é: [–æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏]
                """.strip()},
                {"role": "user", "content": f"""
{courses_context}

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:
–ò–Ω—Ç–µ—Ä–µ—Å—ã: {user_interests}
–û–ø—ã—Ç/–ë—ç–∫–≥—Ä–∞—É–Ω–¥: {user_background}

–†–µ–∫–æ–º–µ–Ω–¥—É–π –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫—É—Ä—Å—ã –∏ –æ–±—ä—è—Å–Ω–∏ –≤—ã–±–æ—Ä.
                """.strip()}
            ]
            
            response = openai.ChatCompletion.create(
                model=self.model,
                messages=messages,
                max_tokens=1500,
                temperature=0.8
            )
            
            recommendations = response.choices[0].message.content.strip()
            
            return {
                'recommendations': recommendations,
                'method': 'gpt_recommendations',
                'success': True
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —á–µ—Ä–µ–∑ GPT: {e}")
            return {'error': str(e)}
    
    def get_program_comparison(self) -> Dict:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º —á–µ—Ä–µ–∑ GPT"""
        
        if not self.is_available():
            return {'error': 'GPT API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        
        try:
            programs = self.db.get_all_programs()
            programs_context = ""
            
            for program in programs:
                programs_context += f"\nüìö {program['name']}\n"
                programs_context += f"–û–ø–∏—Å–∞–Ω–∏–µ: {program.get('description', '')}\n"
                programs_context += f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {program.get('duration', '')}\n"
                
                if program.get('career_prospects'):
                    programs_context += f"–ö–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã: {', '.join(program['career_prospects'])}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫—É—Ä—Å–æ–≤
                courses = self.db.get_courses_by_program(program['id'])[:8]
                if courses:
                    programs_context += "–ö–ª—é—á–µ–≤—ã–µ –∫—É—Ä—Å—ã:\n"
                    for course in courses:
                        programs_context += f"  - {course['name']}\n"
                programs_context += "\n" + "="*50 + "\n"
            
            messages = [
                {"role": "system", "content": """
–¢—ã - –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é –≤ –ò–¢–ú–û. –°—Ä–∞–≤–Ω–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã –ø–æ –ò–ò.

–ó–ê–î–ê–ß–ê:
- –ß–µ—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏ —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏
- –î–ª—è –∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫–∞–∂–¥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
- –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–π
- –ü–æ–º–æ–≥–∏ —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä

–§–û–†–ú–ê–¢:
üéì –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º –ò–¢–ú–û:

üìä –ö–õ–Æ–ß–ï–í–´–ï –†–ê–ó–õ–ò–ß–ò–Ø:
[–æ—Å–Ω–æ–≤–Ω—ã–µ –æ—Ç–ª–∏—á–∏—è]

üë®‚Äçüíº "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç" - –¥–ª—è –∫–æ–≥–æ:
[—Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏]

üöÄ "AI-–ø—Ä–æ–¥—É–∫—Ç—ã" - –¥–ª—è –∫–æ–≥–æ:
[—Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏]

üí° –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å:
[–∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–±–æ—Ä–∞]
                """.strip()},
                {"role": "user", "content": f"""
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –ò–¢–ú–û:
{programs_context}

–°–¥–µ–ª–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É.
                """.strip()}
            ]
            
            response = openai.ChatCompletion.create(
                model=self.model,
                messages=messages,
                max_tokens=1200,
                temperature=0.7
            )
            
            comparison = response.choices[0].message.content.strip()
            
            return {
                'comparison': comparison,
                'method': 'gpt_comparison',
                'success': True
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º —á–µ—Ä–µ–∑ GPT: {e}")
            return {'error': str(e)}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö API
class FreeGPTIntegration(GPTIntegration):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏/–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ GPT API"""
    
    def __init__(self, db_manager: DatabaseManager = None):
        super().__init__(db_manager)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö API
        self.free_apis = [
            {
                'name': 'GPT4Free',
                'base_url': 'https://api.g4f.icu/v1',  # –ü—Ä–∏–º–µ—Ä –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ API
                'model': 'gpt-3.5-turbo'
            },
            {
                'name': 'OpenRouter',
                'base_url': 'https://openrouter.ai/api/v1',
                'model': 'openchat/openchat-7b:free'
            }
        ]
    
    def try_free_apis(self, messages: List[Dict]) -> Optional[str]:
        """–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API"""
        
        for api_config in self.free_apis:
            try:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö API
                logger.info(f"–ü—Ä–æ–±—É–µ–º {api_config['name']}...")
                
                # –ü—Ä–∏–º–µ—Ä –∑–∞–≥–ª—É—à–∫–∏ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API
                # response = requests.post(api_config['base_url'] + '/chat/completions', ...)
                
                # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π fallback
                return None
                
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ {api_config['name']}: {e}")
                continue
        
        return None

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    gpt = GPTIntegration()
    
    if gpt.is_available():
        print("‚úÖ GPT API –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        test_question = "–ö–∞–∫–∏–µ –∫—É—Ä—Å—ã –ø–æ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é –µ—Å—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ?"
        result = gpt.generate_smart_answer(test_question)
        
        print(f"\n‚ùì –í–æ–ø—Ä–æ—Å: {test_question}")
        print(f"ü§ñ –û—Ç–≤–µ—Ç: {result['answer']}")
        print(f"üìä –ú–µ—Ç–æ–¥: {result['method']}")
        
    else:
        print("‚ùå GPT API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ Q&A") 